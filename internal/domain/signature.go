package domain

import (
	"encoding/base64"
	"fmt"
	"time"
)

// SignatureRecord represents single signature generated by device
type SignatureRecord struct {
	ID         string    `json:"id"`
	DeviceID   string    `json:"device_id"`
	SignedData string    `json:"signed_data"`
	Signature  string    `json:"signature"`
	CreatedAt  time.Time `json:"created_at"`
}

// PrepareSignedData creates signed string <counter>_<data>_<last_signature>
func PrepareSignedData(device *SignatureDevice, data string) string {
	lastSignature := device.LastSignature
	if device.SignatureCounter == 0 {
		// base64(device.id) return if first signature
		lastSignature = base64.StdEncoding.EncodeToString([]byte(device.ID))
	}
	return fmt.Sprintf("%d_%s_%s", device.SignatureCounter, data, lastSignature)
}
